<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository\OAuth2;

use Eccube\Entity\Member;
use Eccube\Entity\OAuth2\Scope;
use Eccube\Repository\AbstractRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use OAuth2\Storage\ScopeInterface;

/**
 * ScopeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @see http://bshaffer.github.io/oauth2-server-php-docs/cookbook/doctrine2/
 */
class ScopeRepository extends AbstractRepository implements ScopeInterface
{
    /**
     * ScopeRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Scope::class);
    }

    /**
     * {@inheritdoc}
     */
    public function scopeExists($scope)
    {
        $scopes = explode(' ', $scope);
        $qb = $this->createQueryBuilder('s');
        $qb->select('COUNT(s.id)')
            ->where($qb->expr()->in('s.scope', $scopes));
        $count = $qb->getQuery()->getSingleScalarResult();

        return $count == count($scopes);
    }

    /**
     * {@inheritdoc}
     */
    public function getDefaultScope($client_id = null)
    {
        $Scopes = $this->findBy(['is_default' => true]);
        if ($Scopes) {
            $defaultScopes = array_map(
                function ($Scope) {
                    return $Scope->getScope();
                }, $Scopes
            );

            return implode(' ', $defaultScopes);
        }

        return null;
    }

    /**
     * スペース区切りの scope の文字列とユーザーが使用可能なスコープを返します.
     *
     * @param string $scope スーペース区切りの scope の文字列
     * @param UserInterface 対象のユーザー
     *
     * @return array Scope の配列
     */
    public function findByString($scope, UserInterface $User)
    {
        if ($User instanceof Member) {
            $search_key = 'member_flg';
        } else {
            $search_key = 'customer_flg';
        }
        $scopes = explode(' ', $scope);
        $qb = $this->createQueryBuilder('s');
        $qb->select('s')
            ->where($qb->expr()->in('s.scope', $scopes))
            ->andWhere('s.'.$search_key.' = 1');

        return $qb->getQuery()->getResult();
    }
}
