<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository\OAuth2;

use Eccube\Entity\OAuth2\RefreshToken;
use Eccube\Repository\AbstractRepository;
use OAuth2\Storage\RefreshTokenInterface;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * RefreshTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Kentaro Ohkouchi
 *
 * @see http://bshaffer.github.io/oauth2-server-php-docs/cookbook/doctrine2/
 */
class RefreshTokenRepository extends AbstractRepository implements RefreshTokenInterface
{
    /**
     * ClientRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, RefreshToken::class);
    }

    /**
     * トークンを指定して RefreshToken のフィールドの配列を取得する.
     *
     * @param string $token トークン文字列
     *
     * @return array RefreshToken のフィールドの配列
     */
    public function getRefreshToken($token)
    {
        $refreshToken = $this->findOneBy(['refresh_token' => $token]);
        if ($refreshToken) {
            $Client = $refreshToken->getClient();
            $User = $refreshToken->getUser();
            $refreshToken = $refreshToken->toArray();
            $refreshToken['expires'] = $refreshToken['expires']->getTimestamp();
            if ($Client) {
                $refreshToken['client_id'] = $Client->getClientIdentifier();
            } else {
                $refreshToken['client_id'] = null;
            }
            if ($User) {
                $refreshToken['user_id'] = $User->getSub();
            } else {
                $refreshToken['user_id'] = null;
            }
        }

        return $refreshToken;
    }

    /**
     * トークンを指定して RefreshToken を生成して保存します.
     *
     * @param string $refreshToken トークン文字列
     * @param string $clientIdentifier client_id 文字列
     * @param integer $user_id UserInfo::id
     * @param integer $expires 有効期限の UNIX タイムスタンプ
     * @param string $scope 認可された scope. スペース区切りで複数指定可能
     */
    public function setRefreshToken($refreshToken, $clientIdentifier, $user_id, $expires, $scope = null)
    {
        $client = $this->_em->getRepository('Eccube\Entity\OAuth2\Client')
            ->findOneBy(
                ['client_identifier' => $clientIdentifier]
            );
        // response_type=token の時は UserInfo::id が渡ってくる. それ以外は UserInfo::sub が渡ってくる
        $searchConditions = [];
        if (is_numeric($user_id)) {
            $searchConditions['id'] = $user_id;
        } else {
            $searchConditions['sub'] = $user_id;
        }
        $user = $this->_em->getRepository('Eccube\Entity\OAuth2\OpenID\UserInfo')->findOneBy($searchConditions);
        $RefreshToken = new \Eccube\Entity\OAuth2\RefreshToken();
        $now = new \DateTime();
        $RefreshToken->setPropertiesFromArray([
           'refresh_token' => $refreshToken,
           'client' => $client,
           'user' => $user,
           'expires' => $now->setTimestamp($expires),
           'scope' => $scope,
        ]);
        $this->_em->persist($RefreshToken);
        $this->_em->flush($RefreshToken);
    }

    /**
     * RefreshToken を削除します.
     *
     * @param string $refreshToken トークン文字列
     */
    public function unsetRefreshToken($refreshToken)
    {
        $refreshToken = $this->findOneBy(['refresh_token' => $refreshToken]);
        if ($refreshToken) {
            $this->_em->remove($refreshToken);
            $this->_em->flush($refreshToken);
        }
    }
}
