<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository\OAuth2\OpenID;

use Eccube\Entity\OAuth2\OpenID\PublicKey;
use Eccube\Repository\AbstractRepository;
use OAuth2\Storage\PublicKeyInterface;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * PublicKeyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Kentaro Ohkouchi
 */
class PublicKeyRepository extends AbstractRepository implements PublicKeyInterface
{
    /**
     * ClientRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, PublicKey::class);
    }

    /**
     * {@inheritdoc}
     */
    public function getPublicKey($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getPublicKey();
        }

        return null;
    }

    /**
     * {@inheritdoc}
     */
    public function getPrivateKey($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getPrivateKey();
        }

        return null;
    }

    /**
     * {@inheritdoc}
     */
    public function getEncryptionAlgorithm($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getEncryptionAlgorithm();
        }

        return null;
    }

    /**
     * client_id を指定して PublicKey を取得します.
     *
     * @param string $client_id OAuth2.0 Client ID
     *
     * @return \Eccube\Entity\OAuth2\OpenID\PublicKey
     */
    public function getPublicKeyByClientId($client_id = null)
    {
        if ($client_id) {
            $clientStorage = $this->getEntityManager()->getRepository('Eccube\Entity\OAuth2\Client');
            $userStorage = $this->getEntityManager()->getRepository('Eccube\Entity\OAuth2\OpenID\UserInfo');
            $Client = $clientStorage->findOneBy(['client_identifier' => $client_id]);
            if (!is_object($Client)) {
                return null;
            }
            $userInfoConditions = [];
            if ($Client->hasMember()) {
                $userInfoConditions = ['Member' => $Client->getMember()];
            } elseif ($Client->hasCustomer()) {
                $userInfoConditions = ['Customer' => $Client->getCustomer()];
            } else {
                // nothing public key
                return null;
            }
            $UserInfo = $userStorage->findOneBy($userInfoConditions);
            $PublicKey = $this->findOneBy(['UserInfo' => $UserInfo]);

            return $PublicKey;
        }

        return null;
    }
}
