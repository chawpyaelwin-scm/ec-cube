<?php

/*
 * This file is part of the EccubeApi
 *
 * Copyright (C) 2016 LOCKON CO.,LTD. All Rights Reserved.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository\OAuth2\OpenID;

use Doctrine\ORM\EntityRepository;
use OAuth2\Storage\PublicKeyInterface;

/**
 * PublicKeyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Kentaro Ohkouchi
 */
class PublicKeyRepository extends EntityRepository implements PublicKeyInterface
{
    /**
     * {@inheritdoc}
     */
    public function getPublicKey($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getPublicKey();
        }
        return null;
    }

    /**
     * {@inheritdoc}
     */
    public function getPrivateKey($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getPrivateKey();
        }
        return null;
    }

    /**
     * {@inheritdoc}
     */
    public function getEncryptionAlgorithm($client_id = null)
    {
        $PublicKey = $this->getPublicKeyByClientId($client_id);
        if ($PublicKey) {
            return $PublicKey->getEncryptionAlgorithm();
        }
        return null;
    }

    /**
     * client_id を指定して PublicKey を取得します.
     *
     * @param string $client_id OAuth2.0 Client ID
     * @return \Eccube\Entity\OAuth2\OpenID\PublicKey
     */
    public function getPublicKeyByClientId($client_id = null)
    {
        if ($client_id) {
            $clientStorage  = $this->getEntityManager()->getRepository('Eccube\Entity\OAuth2\Client');
            $userStorage = $this->getEntityManager()->getRepository('Eccube\Entity\OAuth2\OpenID\UserInfo');
            $Client = $clientStorage->findOneBy(array('client_identifier' => $client_id));
            if (!is_object($Client)) {
                return null;
            }
            $userInfoConditions = array();
            if ($Client->hasMember()) {
                $userInfoConditions = array('Member' => $Client->getMember());
            } elseif ($Client->hasCustomer()) {
                $userInfoConditions = array('Customer' => $Client->getCustomer());
            } else {
                // nothing public key
                return null;
            }
            $UserInfo = $userStorage->findOneBy($userInfoConditions);
            $PublicKey = $this->findOneBy(array('UserInfo' => $UserInfo));
            return $PublicKey;
        }
        return null;
    }
}
