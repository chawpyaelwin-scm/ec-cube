<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository\OAuth2\OpenID;

use Eccube\Entity\OAuth2\OpenID\UserInfo;
use Eccube\Repository\AbstractRepository;
use OAuth2\OpenID\Storage\UserClaimsInterface;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * UserInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Kentaro Ohkouchi
 */
class UserInfoRepository extends AbstractRepository implements UserClaimsInterface
{
    /**
     * ClientRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, UserInfo::class);
    }

    /**
     * 要求された scope を指定してクレームの配列を取得する.
     *
     * このメソッドがコールされると、 UserInfo が保持する Customer または Member の情報を UserInfo に同期します.
     *
     * @param integer $user_id UserInfo::id
     * @param string $scope 要求されたスコープ. スペース区切りで複数指定可能.
     *
     * @return array 要求されたクレームの配列
     */
    public function getUserClaims($user_id, $scope)
    {
        // response_type=token の時は UserInfo::id が渡ってくる. それ以外は UserInfo::sub が渡ってくる
        if (is_numeric($user_id)) {
            $searchConditions['id'] = $user_id;
        } else {
            $searchConditions['sub'] = $user_id;
        }

        $UserInfo = $this->findOneBy($searchConditions);
        if (!is_object($UserInfo)) {
            return [];
        }
        // UserInfo の情報を同期する
        if (is_object($UserInfo->getCustomer())) {
            $UserInfo->mergeCustomer();
        } elseif (is_object($UserInfo->getMember())) {
            $UserInfo->mergeMember();
        }
        $UserInfoAddress = $UserInfo->getAddress();
        $this->getEntityManager()->flush($UserInfoAddress);
        $this->getEntityManager()->flush($UserInfo);
        $scopes = [];
        if ($scope) {
            $scopes = explode(' ', $scope);
        }

        $Results = $UserInfo->toArrayByClaims();

        if (in_array('profile', $scopes)) {
            $Results = array_merge($Results, $UserInfo->toArrayByClaims('profile'));
        }
        if (in_array('email', $scopes)) {
            $Results = array_merge($Results, $UserInfo->toArrayByClaims('email'));
        }
        if (in_array('address', $scopes)) {
            $Results = array_merge($Results, $UserInfo->toArrayByClaims('address'));
        }
        if (in_array('phone', $scopes)) {
            $Results = array_merge($Results, $UserInfo->toArrayByClaims('phone'));
        }

        return $Results;
    }
}
